name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env: 
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{  secrets.MONGO_PASSWORD }}


jobs:
  unit-testing:
    name: Unit Testing
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        ports:
          - 27017:27017
    env: 
      MONGO_URI: 'mongodb://localhost:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password

    strategy:
      matrix:
        version: [18, 20]
        os: [ubuntu-latest]
        exclude:
          - version: 18
            os: macos-latest

    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Node JS - ${{ matrix.version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.version }}
      
    - name: Cache NPM Dependencies
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

    - name: Install Dependencies
      run: npm install

    - name: Unit Test
      id: random-for-testing
      run: npm test

    - name: Archive Test Result
      if: always()
      uses: actions/upload-artifact@v4
      with: 
        name: Mocha-test-${{matrix.os}}-${{matrix.version}}-${{matrix.github.run_number}}
        path: test-results.xml

  code-coverage:
    name: Code Coverage
    container:
      image: node:18
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        options:
          --name mongodb
    env: 
      MONGO_URI: 'mongodb://mongodb:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
    runs-on: ubuntu-latest
    steps: 
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    # - name: Setup Node JS
    #   uses: actions/setup-node@v3
    #   with:
    #     node-version: 18
      
    - name: Install Dependencies
      run: npm install 

    - name: Check Code Coverage
      continue-on-error: true
      run: npm run coverage

    - name: Archieving the Coverage
      uses: actions/upload-artifact@v4
      with:
        name: Code-Coverage-Result
        path: coverage
        retention-days: 5
  
  docker:
    name: Containerization
    needs: [unit-testing, code-coverage]
    permissions:
      packages: write
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v4

    - name: Docker Login
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: GHCR Login
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Docker Build Image
      uses: docker/build-push-action@v4
      with: 
        context: .
        push: false
        tags: ${{ vars.DOCKER_USERNAME}}/solar-system:${{ github.sha }}
    
    - name: Image Testing
      run: |
        docker images
        docker run --name solar-system -d \
          -p 3000:3000 \
          -e MONGO_URI=$MONGO_URI \
          -e MONGO_USERNAME=$MONGO_USERNAME \
          -e MONGO_PASSWORD=$MONGO_PASSWORD \
          ${{ vars.DOCKER_USERNAME}}/solar-system:${{ github.sha }}

        echo "Testing Image using wget"
        wget -q -O - 127.0.0.1:3000/live | grep live

    - name: Docker Build Image
      uses: docker/build-push-action@v4
      with: 
        context: .
        push: true
        tags: |
          ${{ vars.DOCKER_USERNAME}}/solar-system:${{ github.sha }}
          ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}
        
  dev-deploy:
    name: Deployment
    needs: docker
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v4
    
    - name: Install Kubectl CLI
      uses: azure/setup-kubectl@v4
      with: 
        version: 'v1.32.1'

    - uses: azure/k8s-set-context@v4
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBECONFIG }}
      
    - name: Fetch Kubernetes Cluster
      run: |
        kubectl version --short
        echo "------------------------------------------------"
        kubectl get nodes




